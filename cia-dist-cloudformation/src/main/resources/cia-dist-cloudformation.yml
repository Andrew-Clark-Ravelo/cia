AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  CIA CloudFormation demo runtime template. Create a HA(3 az LB,3 az servers,MultiAZ
  RDS) solution using a load balanced, auto scaled group in a VPC with where the EC2
  instances can directly access the internet, loadbalancers in public subnet with
  access to app servers and data stored in postgres RDS in private subnet. **WARNING**
  This template creates Elastic Load Balancers and Amazon EC2 instances. You will
  be billed for the AWS resources used if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  WebServerInstanceType:
    Description: WebServer Server EC2 instance type
    Type: String
    Default: t4g.large
    AllowedValues:
      - t4g.micro
      - t4g.small
      - t4g.medium
      - t4g.large
      - t4g.xlarge
      - t4g.2xlarge
      - m7g.large
      - m7g.xlarge
      - m7g.2xlarge
      - c7g.8xlarge
      - c7g.4xlarge
      - m7g.12xlarge
      - m7g.16xlarge
      - c7g.large
      - c7g.xlarge
      - c7g.2xlarge
      - c7g.4xlarge
      - c7g.8xlarge
      - c7g.12large
      - c7g.16xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  WebServerAmi:
    Description: Web server ami ubuntu arm 20.04, recommend ebs encrypted ami based
      on ubuntu hvm-ssd server
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/arm64/hvm/ebs-gp2/ami-id
  WebServerCount:
    Description: Number of EC2 instances to launch for the WebServer server
    Type: Number
    Default: '1'
  WebServerAppLogAppender:
    Description: App log output appender console/elasticsearch/cloudwatch/awslogs/kinesis
    Type: String
    Default: cloudwatch
  WAFWebACL:
    Description: WAFWebACL AWS WAF WebACL ID
    Type: String
    Default: ''
  DomainNamePrefix:
    Description: Domain name prefix (optional), used to setup route53 dns
    Type: String
    Default: cia
  DomainName:
    Description: Domain name (optional), used to setup route53 dns
    Type: String
    Default: hack23.com
  CertificateArn:
    Description: 'Certificate (optional) used to configure loadbalancer if DomainNamePrefix
      and DomainName is also included '
    Type: String
    Default: arn:aws:acm:eu-west-1:172017021075:certificate/ce58dc65-4a13-4ca5-8ddc-ccf7a71cf29d
  SubNetPrefix:
    Description: The prefix for all subnets, only change if you need vpn connection
      and prefer other prefix.
    Type: String
    Default: '10.40'
  DBEncryptionKmsAlias:
    Description: The alias for Key Management Service encryption key alias
    Type: String
    Default: ''
  DBName:
    Default: pgdb
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '8'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUsername:
    Default: root
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    Default: root1234
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
  RotationLambda:
    Description: arn of RotationLambda used to rotate password
    Default: ''
    Type: String
  DBSnapshotName:
    Description: The name of a DB snapshot (optional, if arn:aws:rds:eu-west-1:172017021075:snapshot:cia-demo-20170711
      supplied DBUsername,DBPassword need to eris,discord23)
    Default: ''
    Type: String
  DebPackageUrl:
    Default: https://repo1.maven.org/maven2/com/hack23/cia/cia-dist-deb/2022.1.24/cia-dist-deb-2022.1.24.deb
    Description: The debian package url
    Type: String
    MinLength: '8'
  DBClass:
    Default: db.m6g.xlarge
    Description: Database instance class
    Type: String
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.m6g.large
      - db.m6g.xlarge
      - db.m6g.2xlarge
      - db.m6g.4xlarge
      - db.m6g.10xlarge
      - db.m6g.16xlarge
      - db.r6g.large
      - db.r6g.xlarge
      - db.r6g.2xlarge
      - db.r6g.4xlarge
      - db.r6g.8xlarge
      - db.r6g.16xlarge
    ConstraintDescription: must select a valid database instance type.
  DBAllocatedStorage:
    Default: '100'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '100'
    MaxValue: '6144'
    ConstraintDescription: must be between 10+
  UseElasticSearch:
    Default: 'false'
    Description: Set to true to enable
    Type: String
  ElasticSearchInstanceType:
    Default: t2.medium.elasticsearch
    Description: ElasticSearch instance type
    Type: String
    AllowedValues:
      - t3.micro.elasticsearch
      - t3.small.elasticsearch
      - t3.medium.elasticsearch
      - t3.large.elasticsearch
      - m5.large.elasticsearch
      - m5.xlarge.elasticsearch
      - m5.2xlarge.elasticsearch
      - m5.4xlarge.elasticsearch
      - m5.10xlarge.elasticsearch
      - r5.large.elasticsearch
      - r5.xlarge.elasticsearch
      - r5.2xlarge.elasticsearch
      - r5.4xlarge.elasticsearch
      - r5.8xlarge.elasticsearch
    ConstraintDescription: must select a valid elastic search instance type.
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.40.0.0/16
    Public:
      CIDR: 10.40.10.0/24
    Public2:
      CIDR: 10.40.11.0/24
    Public3:
      CIDR: 10.40.12.0/24
    PrivateApp:
      CIDR: 10.40.30.0/24
    PrivateApp2:
      CIDR: 10.40.31.0/24
    PrivateApp3:
      CIDR: 10.40.32.0/24
    Private:
      CIDR: 10.40.20.0/24
    Private2:
      CIDR: 10.40.21.0/24
    Private3:
      CIDR: 10.40.22.0/24
    QuickSightVpn:
      CIDR: 10.40.40.0/24
  AWSRegionAvailabilityZone:
    us-east-1:
      FIRST: us-east-1a
      SECOND: us-east-1b
      THIRD: us-east-1c
    us-west-1:
      FIRST: us-west-1a
      SECOND: us-west-1b
      THIRD: us-west-1c
    us-west-2:
      FIRST: us-west-2a
      SECOND: us-west-2b
      THIRD: us-west-2c
    eu-west-1:
      FIRST: eu-west-1a
      SECOND: eu-west-1b
      THIRD: eu-west-1c
    eu-north-1:
      FIRST: eu-north-1a
      SECOND: eu-north-1b
      THIRD: eu-north-1c
    eu-central-1:
      FIRST: eu-central-1a
      SECOND: eu-central-1b
      THIRD: eu-central-1c
    ap-northeast-1:
      FIRST: ap-northeast-1a
      SECOND: ap-northeast-1b
      THIRD: ap-northeast-1c
    ap-southeast-1:
      FIRST: ap-southeast-1a
      SECOND: ap-southeast-1b
      THIRD: ap-southeast-1c
    ap-southeast-2:
      FIRST: ap-southeast-2a
      SECOND: ap-southeast-2b
      THIRD: ap-southeast-2c
    sa-east-1:
      FIRST: sa-east-1a
      SECOND: sa-east-1b
      THIRD: sa-east-1c
    cn-north-1:
      FIRST: cn-north-1a
      SECOND: cn-north-1b
      THIRD: cn-north-1c
  Region2ARNPrefix:
    us-east-1:
      ARNPrefix: 'arn:aws:'
    us-west-1:
      ARNPrefix: 'arn:aws:'
    us-west-2:
      ARNPrefix: 'arn:aws:'
    eu-west-1:
      ARNPrefix: 'arn:aws:'
    eu-north-1:
      ARNPrefix: 'arn:aws:'
    ap-northeast-1:
      ARNPrefix: 'arn:aws:'
    ap-southeast-1:
      ARNPrefix: 'arn:aws:'
    ap-southeast-2:
      ARNPrefix: 'arn:aws:'
    sa-east-1:
      ARNPrefix: 'arn:aws:'
    cn-north-1:
      ARNPrefix: 'arn:aws-cn:'
    eu-central-1:
      ARNPrefix: 'arn:aws:'
Conditions:
  useDBSnapshot: !Not
    - !Equals
      - !Ref 'DBSnapshotName'
      - ''
  useCertificate: !Not
    - !Equals
      - !Ref 'CertificateArn'
      - ''
  useDBEncryptionKmsAlias: !Not
    - !Equals
      - !Ref 'DBEncryptionKmsAlias'
      - ''
  useDomainName: !Not
    - !Equals
      - !Ref 'DomainName'
      - ''
  useRotationLambda: !Not
    - !Equals
      - !Ref 'RotationLambda'
      - ''
  useWebACL: !Not
    - !Equals
      - !Ref 'WAFWebACL'
      - ''
  useElasticSearch: !Not
    - !Equals
      - !Ref 'UseElasticSearch'
      - 'false'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  FlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  FlowLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: FlowLogs
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Effect: Allow
            Resource: '*'
      Roles:
        - !Ref 'FlowLogsRole'
    DependsOn:
      - FlowLogsRole
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt 'FlowLogsRole.Arn'
      LogGroupName: !Join
        - ''
        - - VPCFlowLogsGroup
          - '-'
          - !Ref 'AWS::StackName'
      ResourceId: !Ref 'VPC'
      ResourceType: VPC
      TrafficType: ALL
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DependsOn: LogsBucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref 'ArtifactBucketEncryptionKey'
              SSEAlgorithm: aws:kms
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref 'LogsBucket'
        LogFilePrefix: /logs/ArtifactBucket/
  ArtifactBucketEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used for Server Fleet Management Solution artifact bucket
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Sid: manage-key
            Action:
              - kms:*
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
          - Sid: ssm-access-policy-statement
            Action:
              - kms:*
            Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Resource: '*'
  ArtifactBucketEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ssm-bucket-encryption-key
      TargetKeyId: !Ref 'ArtifactBucketEncryptionKey'
  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref 'ArtifactBucket'
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ArtifactBucketPermissionsCheck
            Effect: Allow
            Resource: !Sub '${ArtifactBucket.Arn}'
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - s3:GetBucketAcl
          - Sid: ArtifactBucketDelivery
            Effect: Allow
            Resource: !Sub '${ArtifactBucket.Arn}/*'
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  MaintenanceWindowServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
      Policies:
        - PolicyName: PassRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - '*'
  MaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      Description: Daily Maintenance Window
      AllowUnassociatedTargets: false
      Cutoff: 0
      Schedule: rate(1 hour)
      Duration: 1
      Name: hourly-patching
  MaintenanceWindowTarget:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties:
      Description: Server Fleet Management Solution Instances
      WindowId: !Ref 'MaintenanceWindow'
      ResourceType: INSTANCE
      Targets:
        - Key: tag:SystemPatchComplianceMaintenanceWindowActive
          Values:
            - 'true'
  MaintenanceWindowTaskPatchBaselineInstall:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Description: Runs Server Fleet Management Solution patch baseline
      ServiceRoleArn: !GetAtt 'MaintenanceWindowServiceRole.Arn'
      MaxErrors: 1
      TaskArn: AWS-RunPatchBaseline
      MaxConcurrency: 100%
      WindowId: !Ref 'MaintenanceWindow'
      Priority: 1
      TaskType: RUN_COMMAND
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Comment: Runs patch baseline
          TimeoutSeconds: 600
          Parameters:
            Operation:
              - Install
          OutputS3BucketName: !Ref 'ArtifactBucket'
      Targets:
        - Values:
            - !Ref 'MaintenanceWindowTarget'
          Key: WindowTargetIds
  MaintenanceWindowTaskPatchBaselineScan:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Description: Runs Server Fleet Management Solution patch baseline
      ServiceRoleArn: !GetAtt 'MaintenanceWindowServiceRole.Arn'
      MaxErrors: 1
      TaskArn: AWS-RunPatchBaseline
      MaxConcurrency: 100%
      WindowId: !Ref 'MaintenanceWindow'
      Priority: 2
      TaskType: RUN_COMMAND
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Comment: Runs patch baseline
          TimeoutSeconds: 600
          Parameters:
            Operation:
              - Scan
          OutputS3BucketName: !Ref 'ArtifactBucket'
      Targets:
        - Values:
            - !Ref 'MaintenanceWindowTarget'
          Key: WindowTargetIds
  UpdateSSMAgent:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: UpdateSSMAgent
      Name: AWS-UpdateSSMAgent
      Parameters:
        allowDowngrade:
          - 'false'
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref 'ArtifactBucket'
      ScheduleExpression: rate(7 days)
      Targets:
        - Key: tag:UpdateSSMAgent
          Values:
            - 'true'
  GatherSoftwareInventory:
    Type: AWS::SSM::Association
    DependsOn: ArtifactBucket
    Properties:
      AssociationName: GatherSoftwareInventory
      Name: AWS-GatherSoftwareInventory
      Parameters:
        windowsUpdates:
          - Disabled
        windowsRegistry:
          - Disabled
        windowsRoles:
          - Disabled
        services:
          - Disabled
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref 'ArtifactBucket'
      ScheduleExpression: rate(1 hour)
      Targets:
        - Key: tag:GatherSoftwareInventory
          Values:
            - 'true'
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - FIRST
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - SECOND
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public2
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - THIRD
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public3
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  PrivateAppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - FIRST
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: PrivateApp
  PrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - SECOND
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp2
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: PrivateApp
  PrivateAppSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - THIRD
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp3
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: PrivateApp
  SgFormonitoringVPCEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow access to monitoring VPC Endpoint
      SecurityGroupIngress:
        - Description: vpc endpoint inbound access
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      SecurityGroupEgress:
        - Description: vpc endpoint outbound access
          CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      VpcId: !Ref 'VPC'
  monitoringVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .monitoring
      VpcId: !Ref 'VPC'
      SubnetIds:
        - !Ref 'PrivateAppSubnet'
        - !Ref 'PrivateAppSubnet2'
        - !Ref 'PrivateAppSubnet3'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'SgFormonitoringVPCEndpoint'
  SgForlogsVPCEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow access to logs VPC Endpoint
      SecurityGroupIngress:
        - Description: vpc endpoint inbound access
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      SecurityGroupEgress:
        - Description: vpc endpoint outbound access
          CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      VpcId: !Ref 'VPC'
  logsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .logs
      VpcId: !Ref 'VPC'
      SubnetIds:
        - !Ref 'PrivateAppSubnet'
        - !Ref 'PrivateAppSubnet2'
        - !Ref 'PrivateAppSubnet3'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'SgForlogsVPCEndpoint'
  SgForssmVPCEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow access to ssm VPC Endpoint
      SecurityGroupIngress:
        - Description: vpc endpoint inbound access
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      SecurityGroupEgress:
        - Description: vpc endpoint outbound access
          CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      VpcId: !Ref 'VPC'
  ssmVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ssm
      VpcId: !Ref 'VPC'
      SubnetIds:
        - !Ref 'PrivateAppSubnet'
        - !Ref 'PrivateAppSubnet2'
        - !Ref 'PrivateAppSubnet3'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'SgForssmVPCEndpoint'
  SgForssmmessagesVPCEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow access to ssmmessages VPC Endpoint
      SecurityGroupIngress:
        - Description: vpc endpoint inbound access
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      SecurityGroupEgress:
        - Description: vpc endpoint outbound access
          CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      VpcId: !Ref 'VPC'
  ssmmessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ssmmessages
      VpcId: !Ref 'VPC'
      SubnetIds:
        - !Ref 'PrivateAppSubnet'
        - !Ref 'PrivateAppSubnet2'
        - !Ref 'PrivateAppSubnet3'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'SgForssmmessagesVPCEndpoint'
  SgForecmessagesVPCEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow access to ec2messages VPC Endpoint
      SecurityGroupIngress:
        - Description: vpc endpoint inbound access
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      SecurityGroupEgress:
        - Description: vpc endpoint outbound access
          CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      VpcId: !Ref 'VPC'
  ecmessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ec2messages
      VpcId: !Ref 'VPC'
      SubnetIds:
        - !Ref 'PrivateAppSubnet'
        - !Ref 'PrivateAppSubnet2'
        - !Ref 'PrivateAppSubnet3'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'SgForecmessagesVPCEndpoint'
  sVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref 'VPC'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref 'PrivateAppRouteTable'
  QuickSightVpnConnectionSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - FIRST
      CidrBlock: !FindInMap
        - SubnetConfig
        - QuickSightVpn
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: VPN
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - FIRST
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - SECOND
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private2
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      AvailabilityZone: !FindInMap
        - AWSRegionAvailabilityZone
        - !Ref 'AWS::Region'
        - THIRD
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private3
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet'
      RouteTableId: !Ref 'PublicRouteTable'
  Public2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicRouteTable'
  Public3SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet3'
      RouteTableId: !Ref 'PublicRouteTable'
  PrivateAppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  PrivateAppRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref 'PrivateAppRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT'
  PrivateAppSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateAppSubnet'
      RouteTableId: !Ref 'PrivateAppRouteTable'
  PrivateApp2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateAppSubnet2'
      RouteTableId: !Ref 'PrivateAppRouteTable'
  PrivateApp3SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateAppSubnet3'
      RouteTableId: !Ref 'PrivateAppRouteTable'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NAT
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT'
  QuickSightVpnConnectionSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'QuickSightVpnConnectionSubnet'
      RouteTableId: !Ref 'PrivateRouteTable'
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet'
      RouteTableId: !Ref 'PrivateRouteTable'
  Private2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateRouteTable'
  Private3SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3'
      RouteTableId: !Ref 'PrivateRouteTable'
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  PrivateAppNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  QuickSightVpnNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: VPN
  InboundPostgresqlQuickSightVpnNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'QuickSightVpnNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '5432'
        To: '5432'
  OutboundPostgresqlQuickSightVpnNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'QuickSightVpnNetworkAcl'
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  InboundPostgresqlPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp
        - CIDR
      PortRange:
        From: '5432'
        To: '5432'
  InboundPostgresqlPrivate2NetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp2
        - CIDR
      PortRange:
        From: '5432'
        To: '5432'
  InboundPostgresqlPrivate3NetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp3
        - CIDR
      PortRange:
        From: '5432'
        To: '5432'
  OutboundPostgresqlPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '400'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp
        - CIDR
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPostgresqlPrivate2NetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '500'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp
        - CIDR
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPostgresqlPrivate3NetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkAcl'
      RuleNumber: '600'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateApp3
        - CIDR
      PortRange:
        From: '1024'
        To: '65535'
  InboundPrivateAppNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateAppNetworkAcl'
      RuleNumber: '700'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPrivateAppNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateAppNetworkAcl'
      RuleNumber: '800'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '80'
        To: '65535'
  InboundHttpsPortPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'
  InboundHttpNatPortPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.40.0.0/16
      PortRange:
        From: '80'
        To: '80'
  InboundEphemeralPortPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'
  OutboundHttpPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '400'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '80'
        To: '80'
  OutboundHttpsPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '500'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'
  OutboundEphemeralPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '600'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet'
      NetworkAclId: !Ref 'PublicNetworkAcl'
  Public2SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      NetworkAclId: !Ref 'PublicNetworkAcl'
  Public3SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet3'
      NetworkAclId: !Ref 'PublicNetworkAcl'
  PrivateAppSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateAppSubnet'
      NetworkAclId: !Ref 'PrivateAppNetworkAcl'
  PrivateApp2SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateAppSubnet2'
      NetworkAclId: !Ref 'PrivateAppNetworkAcl'
  PrivateApp3SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateAppSubnet3'
      NetworkAclId: !Ref 'PrivateAppNetworkAcl'
  QuickSightVpnConnectionSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'QuickSightVpnConnectionSubnet'
      NetworkAclId: !Ref 'QuickSightVpnNetworkAcl'
  PrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  Private2SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  Private3SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3'
      NetworkAclId: !Ref 'PrivateNetworkAcl'
  QuickSightVpnConnectionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Quicksight Access from vpn connection
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - Description: QuickSight port not known
          IpProtocol: tcp
          FromPort: '1'
          ToPort: '65535'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - Description: QuickSight port not known
          IpProtocol: tcp
          FromPort: '1'
          ToPort: '65535'
          CidrIp: '0.0.0.0/0'
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - WebServerSecurityGroup
      - QuickSightVpnConnectionSecurityGroup
    Properties:
      GroupDescription: Database Access
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - Description: Postgres inbound access from server
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref 'WebServerSecurityGroup'
        - Description: Postgres inbound access from quicksight enterprise vpc endpoint
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref 'QuickSightVpnConnectionSecurityGroup'
      SecurityGroupEgress:
        - Description: Postgres outbound access to server
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref 'WebServerSecurityGroup'
        - Description: Postgres outbound access to quicksight enterprise vpc endpoint
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref 'QuickSightVpnConnectionSecurityGroup'
  DatabaseParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Database Parameter Group + pg_stat_statements
      Family: postgres14
      Parameters:
        max_prepared_transactions: LEAST({DBInstanceClassMemory/9531392},5000)
        max_parallel_workers_per_gather: '4'
        rds.force_ssl: '1'
        rds.force_admin_logging_level: notice
        rds.force_autovacuum_logging_level: notice
        rds.log_retention_period: '2400'
        shared_preload_libraries: pg_stat_statements, pgaudit
        pgaudit.log: ddl
        pg_stat_statements.track: all
        pg_stat_statements.max: '10000'
  myDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Private Subnet
      SubnetIds:
        - !Ref 'PrivateSubnet'
        - !Ref 'PrivateSubnet2'
        - !Ref 'PrivateSubnet3'
  RDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: This is the secret for my RDS instance
      SecretString: !Join
        - ''
        - - '{"username" : "'
          - !Ref 'DBUsername'
          - '","password" : "'
          - !Ref 'DBPassword'
          - '"}'
      Tags:
        - Key: SecretGroup
          Value: RDS
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref 'RDSInstanceRotationSecret'
      TargetId: !Ref 'Database'
      TargetType: AWS::RDS::DBInstance
  MySecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRotationLambdaInvokePermission
    Condition: useRotationLambda
    Properties:
      SecretId: !Ref 'RDSInstanceRotationSecret'
      RotationLambdaARN: !Ref 'RotationLambda'
      RotationRules:
        AutomaticallyAfterDays: 1
  SecretRotationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: SecretRDSInstanceAttachment
    Condition: useRotationLambda
    Properties:
      FunctionName: MySecretsManagerRotationFunction
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com
  Database:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - PrivateRoute
      - DatabaseSecurityGroup
    Properties:
      DBName: !If
        - useDBSnapshot
        - !Ref 'AWS::NoValue'
        - !Ref 'DBName'
      StorageEncrypted: !If
        - useDBEncryptionKmsAlias
        - 'true'
        - 'false'
      KmsKeyId: !If
        - useDBEncryptionKmsAlias
        - !Ref 'DBEncryptionKmsAlias'
        - !Ref 'AWS::NoValue'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBClass'
      Engine: postgres
      EngineVersion: '14.1'
      MultiAZ: 'false'
      PubliclyAccessible: 'false'
      BackupRetentionPeriod: '7'
      EnablePerformanceInsights: 'true'
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      StorageType: gp2
      DBInstanceIdentifier: rotation-instance
      MasterUsername: !If
        - useDBSnapshot
        - !Ref 'AWS::NoValue'
        - !Join
          - ''
          - - '{{resolve:secretsmanager:'
            - !Ref 'RDSInstanceRotationSecret'
            - :SecretString:username}}
      MasterUserPassword: !If
        - useDBSnapshot
        - !Ref 'AWS::NoValue'
        - !Join
          - ''
          - - '{{resolve:secretsmanager:'
            - !Ref 'RDSInstanceRotationSecret'
            - :SecretString:password}}
      DBSnapshotIdentifier: !If
        - useDBSnapshot
        - !Ref 'DBSnapshotName'
        - !Ref 'AWS::NoValue'
      DBSubnetGroupName: !Ref 'myDBSubnetGroup'
      DBParameterGroupName: !Ref 'DatabaseParamGroup'
      VPCSecurityGroups:
        - !GetAtt 'DatabaseSecurityGroup.GroupId'
  LogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        LogFilePrefix: /logs/LogsBucket/
  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'LogsBucket'
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ELBAccessLogs20130930
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'LogsBucket'
                - /*
            Principal:
              AWS:
                - '156460612806'
            Action:
              - s3:PutObject
  NAT:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet'
      Tags:
        - Key: Network
          Value: NAT
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicElasticLoadBalancerV2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref 'PublicSubnet'
        - !Ref 'PublicSubnet2'
        - !Ref 'PublicSubnet3'
      SecurityGroups:
        - !Ref 'PublicLoadBalancerSecurityGroup'
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref 'LogsBucket'
        - Key: access_logs.s3.prefix
          Value: Logs
        - Key: idle_timeout.timeout_seconds
          Value: '60'
    DependsOn: LogsBucketPolicy
  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Condition: useWebACL
    DependsOn: PublicElasticLoadBalancerV2
    Properties:
      ResourceArn: !Ref 'PublicElasticLoadBalancerV2'
      WebACLArn: !Ref 'WAFWebACL'
  DNSRecordCNAME2PublicElasticLoadBalancerV2:
    Type: AWS::Route53::RecordSet
    Condition: useDomainName
    DependsOn: PublicElasticLoadBalancerV2
    Properties:
      HostedZoneName: !Join
        - ''
        - - !Ref 'DomainName'
          - .
      Comment: !Join
        - ''
        - - !Ref 'DomainNamePrefix'
          - .
          - !Ref 'DomainName'
          - .
      Name: !Join
        - ''
        - - !Ref 'DomainNamePrefix'
          - .
          - !Ref 'DomainName'
          - .
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt 'PublicElasticLoadBalancerV2.DNSName'
  LoadBalancerListenerHttpsV2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: useCertificate
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroupHttps'
      LoadBalancerArn: !Ref 'PublicElasticLoadBalancerV2'
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  TargetGroupHttps:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: useCertificate
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - TargetGroupHttps
      Port: 8443
      Protocol: HTTPS
      VpcId: !Ref 'VPC'
      HealthCheckPort: 8443
      HealthCheckIntervalSeconds: 5
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /healthcheck/
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 6
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '180'
    DependsOn:
      - PublicElasticLoadBalancerV2
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public ELB Security Group with HTTPS access on port 443 from
        the internet
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - Description: Inbound https from public
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - Description: Outbound https from loadbalancer to server
          IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
  WebServerFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PublicRoute
      - Database
    Properties:
      AvailabilityZones:
        - !GetAtt 'PrivateAppSubnet.AvailabilityZone'
        - !GetAtt 'PrivateAppSubnet2.AvailabilityZone'
        - !GetAtt 'PrivateAppSubnet3.AvailabilityZone'
      VPCZoneIdentifier:
        - !Ref 'PrivateAppSubnet'
        - !Ref 'PrivateAppSubnet2'
        - !Ref 'PrivateAppSubnet3'
      LaunchConfigurationName: !Ref 'WebServerLaunchConfig'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: !Ref 'WebServerCount'
      TargetGroupARNs:
        - !Ref 'TargetGroupHttps'
      Tags:
        - Key: Network
          Value: Public
          PropagateAtLaunch: 'true'
        - Key: SecurityBaselineCheck
          Value: 'true'
          PropagateAtLaunch: 'true'
        - Key: UpdateSSMAgent
          Value: 'true'
          PropagateAtLaunch: 'true'
        - Key: GatherSoftwareInventory
          Value: 'true'
          PropagateAtLaunch: 'true'
        - Key: SystemPatchComplianceMaintenanceWindowActive
          Value: 'true'
          PropagateAtLaunch: 'true'
      NotificationConfiguration:
        TopicARN: !Ref 'NotificationTopic'
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
    CreationPolicy:
      ResourceSignal:
        Timeout: PT45M
        Count: !Ref 'WebServerCount'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerFleet'
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerFleet'
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 60% for 30 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '900'
      EvaluationPeriods: '2'
      Threshold: '60'
      AlarmActions:
        - !Ref 'WebServerScaleUpPolicy'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'WebServerFleet'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 30 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '900'
      EvaluationPeriods: '2'
      Threshold: '40'
      AlarmActions:
        - !Ref 'WebServerScaleDownPolicy'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'WebServerFleet'
      ComparisonOperator: LessThanThreshold
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'EC2SSMRole'
      InstanceProfileName: EC2SSMInstanceProfile
  EC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: rdssecretaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                Resource: !Ref 'RDSInstanceRotationSecret'
        - PolicyName: limitedssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutInventory
                  - ssm:PutComplianceItems
                  - ssm:PutConfigurePackageResult
                  - ssm:UpdateAssociationStatus
                  - ssm:UpdateInstanceAssociationStatus
                  - ssm:UpdateInstanceInformation
                  - ssm:ListAssociations
                  - ssm:DescribeAssociation
                  - ssm:ListInstanceAssociations
                  - ec2:DescribeInstanceStatus
                  - ec2messages:AcknowledgeMessage
                  - ec2messages:DeleteMessage
                  - ec2messages:FailMessage
                  - ec2messages:GetEndpoint
                  - ec2messages:GetMessages
                  - ec2messages:SendReply
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - ssm:CreateAssociation
                  - ssm:CreateAssociationBatch
                  - ssm:RegisterTargetWithMaintenanceWindow
                  - ssm:RegisterTaskWithMaintenanceWindow
                  - ssm:StartAutomationExecution
                  - ssm:UpdateMaintenanceWindowTarget
                  - ssm:UpdateMaintenanceWindowTask
                  - cloudwatch:DescribeAlarmHistory
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: allowgathersoftware
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ssm:GetDocument
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-GatherSoftwareInventory'
        - PolicyName: allowrunpatchline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ssm:GetDocument
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunPatchBaseline'
        - PolicyName: allowupdatessmagent
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ssm:GetDocument
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-UpdateSSMAgent'
      RoleName: EC2SSMRole
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              openjdk-16-jdk: []
              ntp: []
              ntpdate: []
              ufw: []
              unzip: []
              language-pack-en: []
              apt-listchanges: []
              debian-goodies: []
              needrestart: []
              apt-show-versions: []
              sysstat: []
              debsecan: []
              debsums: []
              fail2ban: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerLaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - "\n"
                  - "runas=root\n"
            /etc/cron.d/cloudwatch-monitor:
              content: !Join
                - ''
                - - "*/5 * * * * root /opt/aws-scripts-mon/mon-put-instance-data.pl\
                    \ --mem-util --mem-used --mem-avail --swap-util --swap-used --disk-space-util\
                    \ --disk-space-used --disk-space-avail --disk-path=/ --from-cron\n"
            /etc/awslogs.conf:
              content: !Join
                - ''
                - - '[general]'
                  - "\n"
                  - state_file = /var/awslogs/state/agent-state
                  - "\n"
                  - "\n"
                  - '[userdata]'
                  - "\n"
                  - datetime_format = %Y-%m-%d %H:%M:%S
                  - "\n"
                  - file = /var/log/user-data.log
                  - "\n"
                  - buffer_duration = 5000
                  - "\n"
                  - log_stream_name = {instance_id}-{hostname}-{ip_address}-userdata
                  - "\n"
                  - initial_position = start_of_file
                  - "\n"
                  - log_group_name = ec2awslogs
                  - "\n"
                  - "\n"
                  - '[auth]'
                  - "\n"
                  - datetime_format = %Y-%m-%d %H:%M:%S
                  - "\n"
                  - file = /var/log/auth.log
                  - "\n"
                  - buffer_duration = 5000
                  - "\n"
                  - log_stream_name = {instance_id}-{hostname}-{ip_address}-auth
                  - "\n"
                  - initial_position = start_of_file
                  - "\n"
                  - log_group_name = ec2awslogs
                  - "\n"
                  - "\n"
                  - '[syslog]'
                  - "\n"
                  - datetime_format = %Y-%m-%d %H:%M:%S
                  - "\n"
                  - file = /var/log/syslog
                  - "\n"
                  - buffer_duration = 5000
                  - "\n"
                  - log_stream_name = {instance_id}-{hostname}-{ip_address}-syslog
                  - "\n"
                  - initial_position = start_of_file
                  - "\n"
                  - log_group_name = ec2awslogs
                  - "\n"
                  - "\n"
                  - '[kern.log]'
                  - "\n"
                  - datetime_format = %Y-%m-%d %H:%M:%S
                  - "\n"
                  - file = /var/log/kern.log
                  - "\n"
                  - buffer_duration = 5000
                  - "\n"
                  - log_stream_name = {instance_id}-{hostname}-{ip_address}-kern.log
                  - "\n"
                  - initial_position = start_of_file
                  - "\n"
                  - log_group_name = ec2awslogs
                  - "\n"
                  - '[rkhunter.log]'
                  - "\n"
                  - datetime_format = %Y-%m-%d %H:%M:%S
                  - "\n"
                  - file = /var/log/rkhunter.log
                  - "\n"
                  - buffer_duration = 5000
                  - "\n"
                  - log_stream_name = {instance_id}-{hostname}-{ip_address}-rkhunter.log
                  - "\n"
                  - initial_position = start_of_file
                  - "\n"
                  - log_group_name = ec2awslogs
                  - "\n"
                  - '[lynis.log]'
                  - "\n"
                  - datetime_format = %Y-%m-%d %H:%M:%S
                  - "\n"
                  - file = /var/log/lynis.log
                  - "\n"
                  - buffer_duration = 5000
                  - "\n"
                  - log_stream_name = {instance_id}-{hostname}-{ip_address}-lynis.log
                  - "\n"
                  - initial_position = start_of_file
                  - "\n"
                  - log_group_name = ec2awslogs
                  - "\n"
                  - '[ciaapp.log]'
                  - "\n"
                  - datetime_format = %Y-%m-%d %H:%M:%S
                  - "\n"
                  - file = /opt/cia/logs/*.log
                  - "\n"
                  - buffer_duration = 5000
                  - "\n"
                  - log_stream_name = {instance_id}-{hostname}-{ip_address}-ciaapp.log
                  - "\n"
                  - initial_position = start_of_file
                  - "\n"
                  - log_group_name = ec2awslogs
                  - "\n"
              mode: '000644'
              owner: root
              group: root
          services: {}
    Properties:
      ImageId: !Ref 'WebServerAmi'
      IamInstanceProfile: !Ref 'InstanceProfile'
      EbsOptimized: 'true'
      SecurityGroups:
        - !Ref 'WebServerSecurityGroup'
      InstanceType: !Ref 'WebServerInstanceType'
      KeyName: !Ref 'KeyName'
      AssociatePublicIpAddress: 'false'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "exec > >(tee /var/log/user-data.log) 2>&1 \n"
            - "export DEBIAN_FRONTEND=noninteractive\n"
            - "apt_get_install()\n"
            - "{\n"
            - DEBIAN_FRONTEND=noninteractive apt-get -y \n
            - -o DPkg::Options::=--force-confnew \n
            - "install $@\n"
            - "}\n"
            - "timedatectl set-timezone Europe/Stockholm \n"
            - "dpkg-reconfigure -f noninteractive tzdata \n"
            - "echo 'LANG=\"en_US.UTF-8\"'> /etc/default/locale\n"
            - "locale-gen en_US.UTF-8 en_GB.UTF-8 sv_SE.UTF-8 \n"
            - "dpkg-reconfigure --frontend=noninteractive locales \n"
            - "apt-get update\n"
            - "apt-get -y install apt-transport-https\n"
            - "apt-get update\n"
            - "apt-get -y dist-upgrade\n"
            - "apt-get -y install python-pip unattended-upgrades chrony\n"
            - "echo 'server 169.254.169.123 prefer iburst minpoll 4 maxpoll 4' >>\
              \ /etc/chrony/chrony.conf \n"
            - "sudo /etc/init.d/chrony restart\n"
            - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n"
            - "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n"
            - "chmod +x /etc/init.d/cfn-hup \n"
            - "update-rc.d cfn-hup defaults \n "
            - "service cfn-hup start \n"
            - "# Install the sample application\n"
            - 'cfn-init -v '
            - '    --stack '
            - !Ref 'AWS::StackId'
            - '    --resource WebServerLaunchConfig '
            - '    --region '
            - !Ref 'AWS::Region'
            - "\n"
            - "ufw default allow outgoing\n"
            - "ufw default deny incoming\n"
            - "sudo /etc/init.d/ssh stop\n"
            - "sudo apt-get -y purge openssh-server\n"
            - "ufw allow 8443/tcp\n"
            - "ufw allow 53\n"
            - "ufw allow 123/udp\n"
            - "ufw enable\n"
            - "#ufw disable\n"
            - "ufw status verbose\n"
            - "echo 'Sysctl hardening'\n"
            - "echo 'kernel.core_uses_pid = 1' >> /etc/sysctl.conf \n"
            - "echo 'kernel.sysrq = 0' >> /etc/sysctl.conf \n"
            - "echo 'kernel.kptr_restrict = 2' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.all.rp_filter = 1' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.default = 1' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.all.accept_redirects = 0' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.default.accept_redirects = 0' >> /etc/sysctl.conf\
              \ \n"
            - "echo 'net.ipv4.conf.all.accept_redirects = 0' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.all.log_martians = 1' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.default.log_martians = 1' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.all.log_martians = 1' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.all.send_redirects = 0' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.conf.default.accept_source_route = 0' >> /etc/sysctl.conf\
              \ \n"
            - "echo 'net.ipv4.tcp_syncookies = 1' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv4.tcp_timestamps = 0' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv6.conf.all.accept_redirects = 0' >> /etc/sysctl.conf \n"
            - "echo 'net.ipv6.conf.default.accept_redirects = 0' >> /etc/sysctl.conf\
              \ \n"
            - "sysctl -p\n"
            - "cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n"
            - "sudo snap install amazon-ssm-agent --classic\n"
            - "sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service\n"
            - "sudo apt-get -y install curl python software-properties-common xz-utils\
              \ bzip2 gnupg wget graphviz\n"
            - "sudo wget -O /tmp/awslogs-agent-setup.py https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n"
            - "sudo chmod 775 /tmp/awslogs-agent-setup.py\n"
            - "sudo mkdir -p /var/awslogs/etc/\n"
            - "sudo /tmp/awslogs-agent-setup.py -n -r eu-west-1 -c /etc/awslogs.conf\n"
            - "sudo apt-get -y install libwww-perl libdatetime-perl\n"
            - "wget https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip\n"
            - "unzip CloudWatchMonitoringScripts-1.2.1.zip\n"
            - "rm CloudWatchMonitoringScripts-1.2.1.zip\n"
            - "sudo mv aws-scripts-mon /opt/aws-scripts-mon\n"
            - "sudo chmod a+x /opt/aws-scripts-mon/*\n"
            - "sudo chmod +x /etc/cron.d/cloudwatch-monitor*\n"
            - "sudo /etc/init.d/cron restart\n"
            - "# INSTALL OPEN JDK\n"
            - "sudo ln -s /usr/lib/jvm/java-16-openjdk-amd64 /usr/lib/jvm/jdk-16\n"
            - "wget https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_linux-x64_bin.tar.gz\n"
            - "tar xvfz openjdk-17_linux-x64_bin.tar.gz\n"
            - "sudo mv jdk-17 /usr/lib/jvm/\n"
            - "rm openjdk-17_linux-x64_bin.tar.gz\n"
            - 'wget '
            - !Ref 'DebPackageUrl'
            - " -O cia-dist-deb.deb \n"
            - "dpkg -i --force all cia-dist-deb.deb \n"
            - "/etc/init.d/cia stop\n"
            - echo 'database.name=
            - !Ref 'DBName'
            - "'  >> /opt/cia/cia-base/webapps/cia/WEB-INF/database.properties\n"
            - echo 'database.username=allhaildiscordia
            - "'  >> /opt/cia/cia-base/webapps/cia/WEB-INF/database.properties\n"
            - echo 'database.password=legalizeit
            - "'  >> /opt/cia/cia-base/webapps/cia/WEB-INF/database.properties\n"
            - echo 'database.aws.secret.arn=
            - !Ref 'RDSInstanceRotationSecret'
            - "'  >> /opt/cia/cia-base/webapps/cia/WEB-INF/database.properties\n"
            - echo 'database.aws.secret=true
            - "'  >> /opt/cia/cia-base/webapps/cia/WEB-INF/database.properties\n"
            - echo 'database.hostname=
            - !GetAtt 'Database.Endpoint.Address'
            - "'  >> /opt/cia/cia-base/webapps/cia/WEB-INF/database.properties\n"
            - "sed -i -e 's_\">/cia<_\">/<_' /opt/cia/webapps/cia.xml\n"
            - "LOCAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n"
            - "HISTCONTROL=ignorespace\n"
            - "KEY_PWD=$(< /dev/urandom tr -dc A-Z-a-z-0-9 | head -c${1:-32};echo)\n"
            - "rm -rf /opt/cia/etc/keystore.p12\n"
            - '/usr/lib/jvm/jdk-14/bin/keytool -genkey -noprompt -deststoretype pkcs12
              -sigalg SHA256withRSA -validity 365 -keyalg RSA -keysize 4096 '
            - ' -alias jetty  -dname ''CN=$LOCAL_IP, OU=None, O=None, L=None, S=None,
              C=SE'' -keystore /opt/cia/etc/keystore.p12 '
            - " -storepass $KEY_PWD -keypass $KEY_PWD\n"
            - "chown cia:cia /opt/cia/etc/keystore.p12\n"
            - "chmod 700 /opt/cia/etc/keystore.p12\n"
            - " sed -i -e 's_jetty.sslContext.keyManagerPassword=changeit_jetty.sslContext.keyManagerPassword='$KEY_PWD'_'\
              \ /opt/cia/cia-base/start.d/ssl.ini\n"
            - " sed -i -e 's_jetty.sslContext.keyStorePassword=changeit_jetty.sslContext.keyStorePassword='$KEY_PWD'_'\
              \ /opt/cia/cia-base/start.d/ssl.ini\n"
            - "TOTAL_MEM_KB=$(awk '/MemTotal:/ { print $2 }' /proc/meminfo)\n"
            - "let JAVAMEMSIZE=$TOTAL_MEM_KB-3046*1024\n"
            - "sed -i -e 's_4096m_'$JAVAMEMSIZE'k_' /etc/default/cia\n"
            - '# sed -i -e ''s/# -DUSE_LOG_APPENDER='
            - !Ref 'WebServerAppLogAppender'
            - / -DUSE_LOG_APPENDER=
            - !Ref 'WebServerAppLogAppender'
            - "/' /etc/default/cia\n"
            - sed -i -e 's/#JAVAMELODY
            - / JAVAMELODY
            - "/' /opt/cia/start.ini\n"
            - "wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem\n"
            - "mkdir /opt/cia/.postgresql\n"
            - "cp rds-combined-ca-bundle.pem /opt/cia/.postgresql/root.crt\n"
            - "chown -R cia:cia /opt/cia/.postgresql\n"
            - "chmod -R 700 /opt/cia/.postgresql\n"
            - "/usr/lib/jvm/jdk-14/bin/keytool -import -keystore /etc/ssl/certs/java/cacerts\
              \ -file rds-combined-ca-bundle.pem -storepass 'changeit' -noprompt -alias\
              \ aws-rds-2016\n"
            - "/etc/init.d/cia stop\n"
            - "/etc/init.d/cia start\n"
            - "update-rc.d cia defaults\n"
            - "# TODO setup  cron jobs for security auditing, intrusion detection,\
              \ system hardening#\n"
            - "sudo apt-get -y install lsb-invalid-mta\n"
            - "sudo apt-get -y install acct auditd audispd-plugins\n"
            - "sudo apt-get -y install aide rkhunter chkrootkit lynis\n"
            - "sudo chkrootkit\n"
            - "#sudo rkhunter --update --cronjob\n"
            - "#sudo rkhunter --propupd --cronjob\n"
            - "#sudo rkhunter --cronjob --check --quiet\n"
            - "sudo lynis -c --cronjob\n"
            - "sudo aideinit\n"
            - "sudo cp /var/lib/aide/aide.db.new /var/lib/aide/aide.db \n"
            - "sudo update-aide.conf\n"
            - "sudo cp /var/lib/aide/aide.conf.autogenerated /etc/aide/aide.conf\n"
            - "# Baseline processes open sockets #\n"
            - "sudo apt-get -y install procinfo\n"
            - "sudo socklist\n"
            - "# Signal completion\n"
            - 'cfn-signal -e $? '
            - '    --stack '
            - !Ref 'AWS::StackId'
            - '    --resource WebServerFleet '
            - '    --region '
            - !Ref 'AWS::Region'
            - "\n"
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: PublicLoadBalancerSecurityGroup
    Properties:
      GroupDescription: Allow access from load balancer and bastion as well as outbound
        HTTP and HTTPS traffic
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - Description: Loadbalancer inbound access
          IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          SourceSecurityGroupId: !Ref 'PublicLoadBalancerSecurityGroup'
      SecurityGroupEgress:
        - Description: Loadbalancer outbound access
          IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          SourceSecurityGroupId: !Ref 'PublicLoadBalancerSecurityGroup'
        - Description: Server outbound http access
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: Server outbound https access
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        - Description: Server outbound postgres access
          IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
        - Description: Server outbound ntp access
          IpProtocol: udp
          FromPort: '123'
          ToPort: '123'
          CidrIp: '0.0.0.0/0'
        - Description: Server outbound udp dns access
          IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: '0.0.0.0/0'
        - Description: Server outbound tcp dns access
          IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: '0.0.0.0/0'
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Lambda
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - Description: vpc inbound access
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
      SecurityGroupEgress:
        - Description: Server outbound https access
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
  ElasticsearchDomainSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: useElasticSearch
    Properties:
      GroupDescription: Allow access to ElasticsearchDomain
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - Description: vpc inbound access
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
      SecurityGroupEgress:
        - Description: Server outbound http access
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: Server outbound https access
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Condition: useElasticSearch
    Properties:
      DomainName: !Ref 'DomainNamePrefix'
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref 'DBEncryptionKmsAlias'
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      NodeToNodeEncryptionOptions:
        Enabled: true
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 30
        VolumeType: gp2
      ElasticsearchVersion: '7.10'
      ElasticsearchClusterConfig:
        InstanceType: !Ref 'ElasticSearchInstanceType'
        InstanceCount: 1
      VPCOptions:
        SubnetIds:
          - !Ref 'PrivateAppSubnet'
          - !Ref 'PrivateAppSubnet2'
          - !Ref 'PrivateAppSubnet3'
        SecurityGroupIds:
          - !Ref 'ElasticsearchDomainSecurityGroup'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS: '*'
            Action: es:*
            Resource: arn:aws:es:*
Outputs:
  WebSite:
    Description: URL of the website
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'PublicElasticLoadBalancerV2.DNSName'
  JDBCConnectionString:
    Description: JDBC connection string for database
    Value: !Join
      - ''
      - - jdbc:postgresql://
        - !GetAtt 'Database.Endpoint.Address'
        - ':'
        - !GetAtt 'Database.Endpoint.Port'
        - /
        - !Ref 'DBName'
  ElasticSearchName:
    Description: Elasticsearch domain name
    Value: !Ref 'ElasticsearchDomain'
    Condition: useElasticSearch
  ElasticSearchDomain:
    Description: Elasticsearch domain endpoint
    Value: !GetAtt 'ElasticsearchDomain.DomainEndpoint'
    Condition: useElasticSearch
  ElasticSearchURL:
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'ElasticsearchDomain.DomainEndpoint'
    Description: Elasticsearch domain URL
    Condition: useElasticSearch
  KibanaURL:
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'ElasticsearchDomain.DomainEndpoint'
        - _plugin/kibana/
    Description: Elasticsearch domain URL
    Condition: useElasticSearch
